plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '0.0.1'
}

android {
    namespace 'de.hfmnuernberg.tiomusic'
    compileSdkVersion 36
    ndkVersion "28.2.13676358"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    defaultConfig {
        applicationId "com.studiofluffy.tonica"
        minSdkVersion 33
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(System.getenv('ANDROID_KEYSTORE_PATH') ?: 'release.keystore')
            storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
            keyAlias System.getenv('ANDROID_KEY_ALIAS')
            keyPassword System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: "[DEV] TIO Music"]
        }
        prd {
            dimension "default"
            applicationIdSuffix ""
            manifestPlaceholders = [appName: "TIO Music"]
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            }
        }
        debug {
            signingConfig signingConfigs.debug

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            }
        }
    }
}

flutter {
    source '../..'
}

def sdkDir = localProperties.getProperty('sdk.dir') ?: System.getenv('ANDROID_SDK_ROOT') ?: System.getenv('ANDROID_HOME')
def ndkVer = android.ndkVersion
def ndkPath = (sdkDir && ndkVer) ? new File(new File(sdkDir, 'ndk'), ndkVer).absolutePath : null

[
        Debug: null,
        Profile: '--release',
        Release: '--release'
].each {
    def taskPostfix = it.key
    def profileMode = it.value
    tasks.register("cargoBuild${taskPostfix}", Exec) {
      workingDir "../../rust"
      commandLine 'cargo',
              'ndk',
              '-t', 'armeabi-v7a',
              '-t', 'arm64-v8a',
              '-t', 'x86_64',
              '-o', "${project.projectDir}/src/main/jniLibs",
              'build'
      if (ndkPath != null) {
        environment 'ANDROID_NDK_HOME', ndkPath
      }
      if (sdkDir != null) {
        environment 'ANDROID_SDK_ROOT', sdkDir
      }
      if (profileMode != null) {
        args profileMode
      }
      doLast {
        if (ndkPath == null) {
          throw new GradleException("NDK path not resolved â€” cannot copy libc++_shared.so")
        }

        def abiList = ["arm64-v8a", "armeabi-v7a", "x86_64"]
        def tripleMap = [
          "arm64-v8a": "aarch64-linux-android",
          "armeabi-v7a": "arm-linux-androideabi",
          "x86_64": "x86_64-linux-android"
        ]

        def minApi = android.defaultConfig.minSdkVersion.apiString ?: "21"
        def prebuiltRoot = new File(ndkPath, "toolchains/llvm/prebuilt")
        def hostDirs = prebuiltRoot.exists() ? prebuiltRoot.listFiles()?.findAll { it.isDirectory() } : []

        abiList.each { abi ->
          def candidates = hostDirs.collectMany { host ->
            [
              new File(new File(new File(new File(host, "sysroot/usr/lib"), tripleMap[abi]), ""), "libc++_shared.so"),
              new File(new File(new File(new File(new File(host, "sysroot/usr/lib"), tripleMap[abi]), minApi), ""), "libc++_shared.so")
            ]
          }

          def found = candidates.find { it.exists() }
          def dstDir = file("src/main/jniLibs/${abi}")
          dstDir.mkdirs()
          if (found) {
            copy {
              from found
              into dstDir
            }
          } else {
            throw new GradleException("libc++_shared.so not found for ${abi}")
          }
        }
      }
    }

  afterEvaluate {
    android.applicationVariants.all { variant ->
      def variantCap = variant.name.capitalize()
      def btCap = variant.buildType.name.capitalize()
      tasks.named("pre${variantCap}Build").configure {
        dependsOn "cargoBuild${btCap}"
      }
    }
  }
}
