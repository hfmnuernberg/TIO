#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::modules::media_player::MediaPlayerState;
use crate::modules::metronome::BeatHappenedEvent;
use crate::modules::metronome_rhythm::BeatSound;
use crate::modules::metronome_rhythm::BeatType;
use crate::modules::metronome_rhythm::BeatTypePoly;
use crate::modules::metronome_rhythm::MetroBar;

// Section: wire functions

fn wire_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(init()),
    )
}
fn wire_poll_debug_log_message_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<String>, _>(
        WrapInfo {
            debug_name: "poll_debug_log_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(poll_debug_log_message()),
    )
}
fn wire_tuner_get_frequency_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f32>, _>(
        WrapInfo {
            debug_name: "tuner_get_frequency",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(tuner_get_frequency()),
    )
}
fn wire_tuner_start_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "tuner_start",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(tuner_start()),
    )
}
fn wire_tuner_stop_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "tuner_stop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(tuner_stop()),
    )
}
fn wire_generator_start_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "generator_start",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(generator_start()),
    )
}
fn wire_generator_stop_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "generator_stop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(generator_stop()),
    )
}
fn wire_generator_note_on_impl(port_: MessagePort, new_freq: impl Wire2Api<f32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "generator_note_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_new_freq = new_freq.wire2api();
            move |task_callback| Result::<_, ()>::Ok(generator_note_on(api_new_freq))
        },
    )
}
fn wire_generator_note_off_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "generator_note_off",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(generator_note_off()),
    )
}
fn wire_media_player_load_wav_impl(
    port_: MessagePort,
    wav_file_path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_load_wav",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_wav_file_path = wav_file_path.wire2api();
            move |task_callback| Result::<_, ()>::Ok(media_player_load_wav(api_wav_file_path))
        },
    )
}
fn wire_media_player_start_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_start",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_start()),
    )
}
fn wire_media_player_stop_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_stop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_stop()),
    )
}
fn wire_media_player_start_recording_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_start_recording",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_start_recording()),
    )
}
fn wire_media_player_stop_recording_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_stop_recording",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_stop_recording()),
    )
}
fn wire_media_player_get_recording_samples_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "media_player_get_recording_samples",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_get_recording_samples()),
    )
}
fn wire_media_player_set_pitch_semitones_impl(
    port_: MessagePort,
    pitch_semitones: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_set_pitch_semitones",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pitch_semitones = pitch_semitones.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(media_player_set_pitch_semitones(api_pitch_semitones))
            }
        },
    )
}
fn wire_media_player_set_speed_factor_impl(
    port_: MessagePort,
    speed_factor: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_set_speed_factor",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_speed_factor = speed_factor.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(media_player_set_speed_factor(api_speed_factor))
            }
        },
    )
}
fn wire_media_player_set_trim_impl(
    port_: MessagePort,
    start_factor: impl Wire2Api<f32> + UnwindSafe,
    end_factor: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "media_player_set_trim",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_start_factor = start_factor.wire2api();
            let api_end_factor = end_factor.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(media_player_set_trim(api_start_factor, api_end_factor))
            }
        },
    )
}
fn wire_media_player_get_rms_impl(port_: MessagePort, n_bins: impl Wire2Api<usize> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f32>, _>(
        WrapInfo {
            debug_name: "media_player_get_rms",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n_bins = n_bins.wire2api();
            move |task_callback| Result::<_, ()>::Ok(media_player_get_rms(api_n_bins))
        },
    )
}
fn wire_media_player_set_loop_impl(port_: MessagePort, looping: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "media_player_set_loop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_looping = looping.wire2api();
            move |task_callback| Result::<_, ()>::Ok(media_player_set_loop(api_looping))
        },
    )
}
fn wire_media_player_get_state_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<MediaPlayerState>, _>(
        WrapInfo {
            debug_name: "media_player_get_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(media_player_get_state()),
    )
}
fn wire_media_player_set_playback_pos_factor_impl(
    port_: MessagePort,
    pos_factor: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_set_playback_pos_factor",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pos_factor = pos_factor.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(media_player_set_playback_pos_factor(api_pos_factor))
            }
        },
    )
}
fn wire_media_player_set_volume_impl(port_: MessagePort, volume: impl Wire2Api<f32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "media_player_set_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_volume = volume.wire2api();
            move |task_callback| Result::<_, ()>::Ok(media_player_set_volume(api_volume))
        },
    )
}
fn wire_metronome_start_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_start",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(metronome_start()),
    )
}
fn wire_metronome_stop_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_stop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(metronome_stop()),
    )
}
fn wire_metronome_set_bpm_impl(port_: MessagePort, bpm: impl Wire2Api<f32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_set_bpm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bpm = bpm.wire2api();
            move |task_callback| Result::<_, ()>::Ok(metronome_set_bpm(api_bpm))
        },
    )
}
fn wire_metronome_load_file_impl(
    port_: MessagePort,
    beat_type: impl Wire2Api<BeatSound> + UnwindSafe,
    wav_file_path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_load_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_beat_type = beat_type.wire2api();
            let api_wav_file_path = wav_file_path.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(metronome_load_file(api_beat_type, api_wav_file_path))
            }
        },
    )
}
fn wire_metronome_set_rhythm_impl(
    port_: MessagePort,
    bars: impl Wire2Api<Vec<MetroBar>> + UnwindSafe,
    bars_2: impl Wire2Api<Vec<MetroBar>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_set_rhythm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bars = bars.wire2api();
            let api_bars_2 = bars_2.wire2api();
            move |task_callback| Result::<_, ()>::Ok(metronome_set_rhythm(api_bars, api_bars_2))
        },
    )
}
fn wire_metronome_poll_beat_event_happened_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<BeatHappenedEvent>, _>(
        WrapInfo {
            debug_name: "metronome_poll_beat_event_happened",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(metronome_poll_beat_event_happened()),
    )
}
fn wire_metronome_set_muted_impl(port_: MessagePort, muted: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_set_muted",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_muted = muted.wire2api();
            move |task_callback| Result::<_, ()>::Ok(metronome_set_muted(api_muted))
        },
    )
}
fn wire_metronome_set_beat_mute_chance_impl(
    port_: MessagePort,
    mute_chance: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_set_beat_mute_chance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mute_chance = mute_chance.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(metronome_set_beat_mute_chance(api_mute_chance))
            }
        },
    )
}
fn wire_metronome_set_volume_impl(port_: MessagePort, volume: impl Wire2Api<f32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "metronome_set_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_volume = volume.wire2api();
            move |task_callback| Result::<_, ()>::Ok(metronome_set_volume(api_volume))
        },
    )
}
fn wire_piano_setup_impl(port_: MessagePort, sound_font_path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_setup",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sound_font_path = sound_font_path.wire2api();
            move |task_callback| Result::<_, ()>::Ok(piano_setup(api_sound_font_path))
        },
    )
}
fn wire_piano_start_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_start",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(piano_start()),
    )
}
fn wire_piano_stop_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_stop",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(piano_stop()),
    )
}
fn wire_piano_note_on_impl(port_: MessagePort, note: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_note_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Result::<_, ()>::Ok(piano_note_on(api_note))
        },
    )
}
fn wire_piano_note_off_impl(port_: MessagePort, note: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_note_off",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Result::<_, ()>::Ok(piano_note_off(api_note))
        },
    )
}
fn wire_piano_set_volume_impl(port_: MessagePort, volume: impl Wire2Api<f32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "piano_set_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_volume = volume.wire2api();
            move |task_callback| Result::<_, ()>::Ok(piano_set_volume(api_volume))
        },
    )
}
fn wire_get_sample_rate_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, usize, _>(
        WrapInfo {
            debug_name: "get_sample_rate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_sample_rate()),
    )
}
fn wire_debug_test_function_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "debug_test_function",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(debug_test_function()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<BeatSound> for i32 {
    fn wire2api(self) -> BeatSound {
        match self {
            0 => BeatSound::Accented,
            1 => BeatSound::Accented2,
            2 => BeatSound::Unaccented,
            3 => BeatSound::Unaccented2,
            4 => BeatSound::PolyAccented,
            5 => BeatSound::PolyAccented2,
            6 => BeatSound::PolyUnaccented,
            7 => BeatSound::PolyUnaccented2,
            8 => BeatSound::Muted,
            _ => unreachable!("Invalid variant for BeatSound: {}", self),
        }
    }
}
impl Wire2Api<BeatType> for i32 {
    fn wire2api(self) -> BeatType {
        match self {
            0 => BeatType::Accented,
            1 => BeatType::Unaccented,
            2 => BeatType::Muted,
            _ => unreachable!("Invalid variant for BeatType: {}", self),
        }
    }
}
impl Wire2Api<BeatTypePoly> for i32 {
    fn wire2api(self) -> BeatTypePoly {
        match self {
            0 => BeatTypePoly::Accented,
            1 => BeatTypePoly::Unaccented,
            2 => BeatTypePoly::Muted,
            _ => unreachable!("Invalid variant for BeatTypePoly: {}", self),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for BeatHappenedEvent {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.milliseconds_before_start.into_into_dart().into_dart(),
            self.is_random_mute.into_into_dart().into_dart(),
            self.bar_index.into_into_dart().into_dart(),
            self.is_poly.into_into_dart().into_dart(),
            self.is_secondary.into_into_dart().into_dart(),
            self.beat_index.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BeatHappenedEvent {}
impl rust2dart::IntoIntoDart<BeatHappenedEvent> for BeatHappenedEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaPlayerState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.playing.into_into_dart().into_dart(),
            self.playback_position_factor.into_into_dart().into_dart(),
            self.total_length_seconds.into_into_dart().into_dart(),
            self.looping.into_into_dart().into_dart(),
            self.trim_start_factor.into_into_dart().into_dart(),
            self.trim_end_factor.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaPlayerState {}
impl rust2dart::IntoIntoDart<MediaPlayerState> for MediaPlayerState {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
