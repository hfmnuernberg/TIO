// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  Future<String?> pollDebugLogMessage({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPollDebugLogMessageConstMeta;

  Future<double?> tunerGetFrequency({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTunerGetFrequencyConstMeta;

  Future<bool> tunerStart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTunerStartConstMeta;

  Future<bool> tunerStop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTunerStopConstMeta;

  Future<bool> generatorStart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGeneratorStartConstMeta;

  Future<bool> generatorStop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGeneratorStopConstMeta;

  Future<bool> generatorNoteOn({required double newFreq, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGeneratorNoteOnConstMeta;

  Future<bool> generatorNoteOff({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGeneratorNoteOffConstMeta;

  Future<bool> mediaPlayerLoadWav({required String wavFilePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerLoadWavConstMeta;

  Future<bool> mediaPlayerStart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStartConstMeta;

  Future<bool> mediaPlayerStop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStopConstMeta;

  Future<bool> mediaPlayerStartRecording({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStartRecordingConstMeta;

  Future<bool> mediaPlayerStopRecording({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStopRecordingConstMeta;

  Future<Float64List> mediaPlayerGetRecordingSamples({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetRecordingSamplesConstMeta;

  Future<bool> mediaPlayerSetPitchSemitones(
      {required double pitchSemitones, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetPitchSemitonesConstMeta;

  Future<bool> mediaPlayerSetSpeedFactor(
      {required double speedFactor, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetSpeedFactorConstMeta;

  Future<void> mediaPlayerSetTrim(
      {required double startFactor, required double endFactor, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetTrimConstMeta;

  Future<Float32List> mediaPlayerGetRms({required int nBins, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetRmsConstMeta;

  Future<void> mediaPlayerSetLoop({required bool looping, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetLoopConstMeta;

  Future<MediaPlayerState?> mediaPlayerGetState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetStateConstMeta;

  Future<bool> mediaPlayerSetPlaybackPosFactor(
      {required double posFactor, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetPlaybackPosFactorConstMeta;

  Future<bool> mediaPlayerSetVolume({required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetVolumeConstMeta;

  Future<bool> metronomeStart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeStartConstMeta;

  Future<bool> metronomeStop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeStopConstMeta;

  Future<bool> metronomeSetBpm({required double bpm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeSetBpmConstMeta;

  Future<bool> metronomeLoadFile(
      {required BeatSound beatType, required String wavFilePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeLoadFileConstMeta;

  Future<bool> metronomeSetRhythm(
      {required List<MetroBar> bars,
      required List<MetroBar> bars2,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeSetRhythmConstMeta;

  Future<BeatHappenedEvent?> metronomePollBeatEventHappened({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomePollBeatEventHappenedConstMeta;

  Future<bool> metronomeSetMuted({required bool muted, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeSetMutedConstMeta;

  Future<bool> metronomeSetBeatMuteChance(
      {required double muteChance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeSetBeatMuteChanceConstMeta;

  Future<bool> metronomeSetVolume({required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMetronomeSetVolumeConstMeta;

  Future<bool> pianoSetup({required String soundFontPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoSetupConstMeta;

  Future<bool> pianoStart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoStartConstMeta;

  Future<bool> pianoStop({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoStopConstMeta;

  Future<bool> pianoNoteOn({required int note, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoNoteOnConstMeta;

  Future<bool> pianoNoteOff({required int note, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoNoteOffConstMeta;

  Future<bool> pianoSetVolume({required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPianoSetVolumeConstMeta;

  Future<int> getSampleRate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSampleRateConstMeta;

  Future<bool> debugTestFunction({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDebugTestFunctionConstMeta;
}

class BeatHappenedEvent {
  final int millisecondsBeforeStart;
  final bool isRandomMute;
  final int barIndex;
  final bool isPoly;
  final bool isSecondary;
  final int beatIndex;

  const BeatHappenedEvent({
    required this.millisecondsBeforeStart,
    required this.isRandomMute,
    required this.barIndex,
    required this.isPoly,
    required this.isSecondary,
    required this.beatIndex,
  });
}

enum BeatSound {
  Accented,
  Accented2,
  Unaccented,
  Unaccented2,
  PolyAccented,
  PolyAccented2,
  PolyUnaccented,
  PolyUnaccented2,
  Muted,
}

enum BeatType {
  Accented,
  Unaccented,
  Muted,
}

enum BeatTypePoly {
  Accented,
  Unaccented,
  Muted,
}

class MediaPlayerState {
  final bool playing;
  final double playbackPositionFactor;
  final double totalLengthSeconds;
  final bool looping;
  final double trimStartFactor;
  final double trimEndFactor;

  const MediaPlayerState({
    required this.playing,
    required this.playbackPositionFactor,
    required this.totalLengthSeconds,
    required this.looping,
    required this.trimStartFactor,
    required this.trimEndFactor,
  });
}

class MetroBar {
  final int id;
  final List<BeatType> beats;
  final List<BeatTypePoly> polyBeats;
  final double beatLen;

  const MetroBar({
    required this.id,
    required this.beats,
    required this.polyBeats,
    required this.beatLen,
  });
}
