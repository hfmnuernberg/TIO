// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  Future<String?> pollDebugLogMessage({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_poll_debug_log_message(port_),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: null,
      constMeta: kPollDebugLogMessageConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPollDebugLogMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "poll_debug_log_message",
        argNames: [],
      );

  Future<double?> tunerGetFrequency({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tuner_get_frequency(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_f32,
      parseErrorData: null,
      constMeta: kTunerGetFrequencyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTunerGetFrequencyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tuner_get_frequency",
        argNames: [],
      );

  Future<bool> tunerStart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tuner_start(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kTunerStartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTunerStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tuner_start",
        argNames: [],
      );

  Future<bool> tunerStop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tuner_stop(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kTunerStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTunerStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tuner_stop",
        argNames: [],
      );

  Future<bool> generatorStart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generator_start(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kGeneratorStartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGeneratorStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generator_start",
        argNames: [],
      );

  Future<bool> generatorStop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generator_stop(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kGeneratorStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGeneratorStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generator_stop",
        argNames: [],
      );

  Future<bool> generatorNoteOn({required double newFreq, dynamic hint}) {
    var arg0 = api2wire_f32(newFreq);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generator_note_on(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kGeneratorNoteOnConstMeta,
      argValues: [newFreq],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGeneratorNoteOnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generator_note_on",
        argNames: ["newFreq"],
      );

  Future<bool> generatorNoteOff({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generator_note_off(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kGeneratorNoteOffConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGeneratorNoteOffConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generator_note_off",
        argNames: [],
      );

  Future<bool> mediaPlayerLoadWav({required String wavFilePath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(wavFilePath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_load_wav(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerLoadWavConstMeta,
      argValues: [wavFilePath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerLoadWavConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_load_wav",
        argNames: ["wavFilePath"],
      );

  Future<bool> mediaPlayerStart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_media_player_start(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerStartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_start",
        argNames: [],
      );

  Future<bool> mediaPlayerStop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_media_player_stop(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_stop",
        argNames: [],
      );

  Future<bool> mediaPlayerStartRecording({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_start_recording(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerStartRecordingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStartRecordingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_start_recording",
        argNames: [],
      );

  Future<bool> mediaPlayerStopRecording({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_stop_recording(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerStopRecordingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerStopRecordingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_stop_recording",
        argNames: [],
      );

  Future<Float64List> mediaPlayerGetRecordingSamples({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_get_recording_samples(port_),
      parseSuccessData: _wire2api_float_64_list,
      parseErrorData: null,
      constMeta: kMediaPlayerGetRecordingSamplesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetRecordingSamplesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_get_recording_samples",
        argNames: [],
      );

  Future<bool> mediaPlayerSetPitchSemitones(
      {required double pitchSemitones, dynamic hint}) {
    var arg0 = api2wire_f32(pitchSemitones);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_set_pitch_semitones(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerSetPitchSemitonesConstMeta,
      argValues: [pitchSemitones],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetPitchSemitonesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_set_pitch_semitones",
        argNames: ["pitchSemitones"],
      );

  Future<bool> mediaPlayerSetSpeedFactor(
      {required double speedFactor, dynamic hint}) {
    var arg0 = api2wire_f32(speedFactor);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_set_speed_factor(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerSetSpeedFactorConstMeta,
      argValues: [speedFactor],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetSpeedFactorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_set_speed_factor",
        argNames: ["speedFactor"],
      );

  Future<void> mediaPlayerSetTrim(
      {required double startFactor, required double endFactor, dynamic hint}) {
    var arg0 = api2wire_f32(startFactor);
    var arg1 = api2wire_f32(endFactor);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_set_trim(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kMediaPlayerSetTrimConstMeta,
      argValues: [startFactor, endFactor],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetTrimConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_set_trim",
        argNames: ["startFactor", "endFactor"],
      );

  Future<Float32List> mediaPlayerGetRms({required int nBins, dynamic hint}) {
    var arg0 = api2wire_usize(nBins);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_get_rms(port_, arg0),
      parseSuccessData: _wire2api_float_32_list,
      parseErrorData: null,
      constMeta: kMediaPlayerGetRmsConstMeta,
      argValues: [nBins],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetRmsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_get_rms",
        argNames: ["nBins"],
      );

  Future<void> mediaPlayerSetLoop({required bool looping, dynamic hint}) {
    var arg0 = looping;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_set_loop(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kMediaPlayerSetLoopConstMeta,
      argValues: [looping],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetLoopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_set_loop",
        argNames: ["looping"],
      );

  Future<MediaPlayerState?> mediaPlayerGetState({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_media_player_get_state(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_media_player_state,
      parseErrorData: null,
      constMeta: kMediaPlayerGetStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerGetStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_get_state",
        argNames: [],
      );

  Future<bool> mediaPlayerSetPlaybackPosFactor(
      {required double posFactor, dynamic hint}) {
    var arg0 = api2wire_f32(posFactor);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_media_player_set_playback_pos_factor(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerSetPlaybackPosFactorConstMeta,
      argValues: [posFactor],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaPlayerSetPlaybackPosFactorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_player_set_playback_pos_factor",
            argNames: ["posFactor"],
          );

  Future<bool> mediaPlayerSetVolume({required double volume, dynamic hint}) {
    var arg0 = api2wire_f32(volume);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_media_player_set_volume(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMediaPlayerSetVolumeConstMeta,
      argValues: [volume],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaPlayerSetVolumeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_player_set_volume",
        argNames: ["volume"],
      );

  Future<bool> metronomeStart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_metronome_start(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeStartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_start",
        argNames: [],
      );

  Future<bool> metronomeStop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_metronome_stop(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_stop",
        argNames: [],
      );

  Future<bool> metronomeSetBpm({required double bpm, dynamic hint}) {
    var arg0 = api2wire_f32(bpm);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_metronome_set_bpm(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeSetBpmConstMeta,
      argValues: [bpm],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeSetBpmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_set_bpm",
        argNames: ["bpm"],
      );

  Future<bool> metronomeLoadFile(
      {required BeatSound beatType,
      required String wavFilePath,
      dynamic hint}) {
    var arg0 = api2wire_beat_sound(beatType);
    var arg1 = _platform.api2wire_String(wavFilePath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_metronome_load_file(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeLoadFileConstMeta,
      argValues: [beatType, wavFilePath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeLoadFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_load_file",
        argNames: ["beatType", "wavFilePath"],
      );

  Future<bool> metronomeSetRhythm(
      {required List<MetroBar> bars,
      required List<MetroBar> bars2,
      dynamic hint}) {
    var arg0 = _platform.api2wire_list_metro_bar(bars);
    var arg1 = _platform.api2wire_list_metro_bar(bars2);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_metronome_set_rhythm(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeSetRhythmConstMeta,
      argValues: [bars, bars2],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeSetRhythmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_set_rhythm",
        argNames: ["bars", "bars2"],
      );

  Future<BeatHappenedEvent?> metronomePollBeatEventHappened({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_metronome_poll_beat_event_happened(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_beat_happened_event,
      parseErrorData: null,
      constMeta: kMetronomePollBeatEventHappenedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomePollBeatEventHappenedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_poll_beat_event_happened",
        argNames: [],
      );

  Future<bool> metronomeSetMuted({required bool muted, dynamic hint}) {
    var arg0 = muted;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_metronome_set_muted(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeSetMutedConstMeta,
      argValues: [muted],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeSetMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_set_muted",
        argNames: ["muted"],
      );

  Future<bool> metronomeSetBeatMuteChance(
      {required double muteChance, dynamic hint}) {
    var arg0 = api2wire_f32(muteChance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_metronome_set_beat_mute_chance(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeSetBeatMuteChanceConstMeta,
      argValues: [muteChance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeSetBeatMuteChanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_set_beat_mute_chance",
        argNames: ["muteChance"],
      );

  Future<bool> metronomeSetVolume({required double volume, dynamic hint}) {
    var arg0 = api2wire_f32(volume);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_metronome_set_volume(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kMetronomeSetVolumeConstMeta,
      argValues: [volume],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMetronomeSetVolumeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "metronome_set_volume",
        argNames: ["volume"],
      );

  Future<bool> pianoSetup({required String soundFontPath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(soundFontPath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_setup(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoSetupConstMeta,
      argValues: [soundFontPath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoSetupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_setup",
        argNames: ["soundFontPath"],
      );

  Future<bool> pianoStart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_start(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoStartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_start",
        argNames: [],
      );

  Future<bool> pianoStop({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_stop(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoStopConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoStopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_stop",
        argNames: [],
      );

  Future<bool> pianoNoteOn({required int note, dynamic hint}) {
    var arg0 = api2wire_i32(note);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_note_on(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoNoteOnConstMeta,
      argValues: [note],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoNoteOnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_note_on",
        argNames: ["note"],
      );

  Future<bool> pianoNoteOff({required int note, dynamic hint}) {
    var arg0 = api2wire_i32(note);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_note_off(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoNoteOffConstMeta,
      argValues: [note],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoNoteOffConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_note_off",
        argNames: ["note"],
      );

  Future<bool> pianoSetVolume({required double volume, dynamic hint}) {
    var arg0 = api2wire_f32(volume);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_piano_set_volume(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kPianoSetVolumeConstMeta,
      argValues: [volume],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPianoSetVolumeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "piano_set_volume",
        argNames: ["volume"],
      );

  Future<int> getSampleRate({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_sample_rate(port_),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kGetSampleRateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSampleRateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sample_rate",
        argNames: [],
      );

  Future<bool> debugTestFunction({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_debug_test_function(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kDebugTestFunctionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDebugTestFunctionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "debug_test_function",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  BeatHappenedEvent _wire2api_beat_happened_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return BeatHappenedEvent(
      millisecondsBeforeStart: _wire2api_i32(arr[0]),
      isRandomMute: _wire2api_bool(arr[1]),
      barIndex: _wire2api_i32(arr[2]),
      isPoly: _wire2api_bool(arr[3]),
      isSecondary: _wire2api_bool(arr[4]),
      beatIndex: _wire2api_i32(arr[5]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  BeatHappenedEvent _wire2api_box_autoadd_beat_happened_event(dynamic raw) {
    return _wire2api_beat_happened_event(raw);
  }

  double _wire2api_box_autoadd_f32(dynamic raw) {
    return raw as double;
  }

  MediaPlayerState _wire2api_box_autoadd_media_player_state(dynamic raw) {
    return _wire2api_media_player_state(raw);
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Float32List _wire2api_float_32_list(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  MediaPlayerState _wire2api_media_player_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MediaPlayerState(
      playing: _wire2api_bool(arr[0]),
      playbackPositionFactor: _wire2api_f32(arr[1]),
      totalLengthSeconds: _wire2api_f32(arr[2]),
      looping: _wire2api_bool(arr[3]),
      trimStartFactor: _wire2api_f32(arr[4]),
      trimEndFactor: _wire2api_f32(arr[5]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  BeatHappenedEvent? _wire2api_opt_box_autoadd_beat_happened_event(
      dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_beat_happened_event(raw);
  }

  double? _wire2api_opt_box_autoadd_f32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_f32(raw);
  }

  MediaPlayerState? _wire2api_opt_box_autoadd_media_player_state(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_media_player_state(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_beat_sound(BeatSound raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_beat_type(BeatType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_beat_type_poly(BeatTypePoly raw) {
  return api2wire_i32(raw.index);
}

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_list_beat_type> api2wire_list_beat_type(List<BeatType> raw) {
    final ans = inner.new_list_beat_type_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = api2wire_beat_type(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_beat_type_poly> api2wire_list_beat_type_poly(
      List<BeatTypePoly> raw) {
    final ans = inner.new_list_beat_type_poly_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = api2wire_beat_type_poly(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_metro_bar> api2wire_list_metro_bar(List<MetroBar> raw) {
    final ans = inner.new_list_metro_bar_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_metro_bar(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_metro_bar(MetroBar apiObj, wire_MetroBar wireObj) {
    wireObj.id = api2wire_i32(apiObj.id);
    wireObj.beats = api2wire_list_beat_type(apiObj.beats);
    wireObj.poly_beats = api2wire_list_beat_type_poly(apiObj.polyBeats);
    wireObj.beat_len = api2wire_f32(apiObj.beatLen);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
  ) {
    return _wire_init(
      port_,
    );
  }

  late final _wire_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<void Function(int)>();

  void wire_poll_debug_log_message(
    int port_,
  ) {
    return _wire_poll_debug_log_message(
      port_,
    );
  }

  late final _wire_poll_debug_log_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_poll_debug_log_message');
  late final _wire_poll_debug_log_message =
      _wire_poll_debug_log_messagePtr.asFunction<void Function(int)>();

  void wire_tuner_get_frequency(
    int port_,
  ) {
    return _wire_tuner_get_frequency(
      port_,
    );
  }

  late final _wire_tuner_get_frequencyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_tuner_get_frequency');
  late final _wire_tuner_get_frequency =
      _wire_tuner_get_frequencyPtr.asFunction<void Function(int)>();

  void wire_tuner_start(
    int port_,
  ) {
    return _wire_tuner_start(
      port_,
    );
  }

  late final _wire_tuner_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_tuner_start');
  late final _wire_tuner_start =
      _wire_tuner_startPtr.asFunction<void Function(int)>();

  void wire_tuner_stop(
    int port_,
  ) {
    return _wire_tuner_stop(
      port_,
    );
  }

  late final _wire_tuner_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_tuner_stop');
  late final _wire_tuner_stop =
      _wire_tuner_stopPtr.asFunction<void Function(int)>();

  void wire_generator_start(
    int port_,
  ) {
    return _wire_generator_start(
      port_,
    );
  }

  late final _wire_generator_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generator_start');
  late final _wire_generator_start =
      _wire_generator_startPtr.asFunction<void Function(int)>();

  void wire_generator_stop(
    int port_,
  ) {
    return _wire_generator_stop(
      port_,
    );
  }

  late final _wire_generator_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generator_stop');
  late final _wire_generator_stop =
      _wire_generator_stopPtr.asFunction<void Function(int)>();

  void wire_generator_note_on(
    int port_,
    double new_freq,
  ) {
    return _wire_generator_note_on(
      port_,
      new_freq,
    );
  }

  late final _wire_generator_note_onPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_generator_note_on');
  late final _wire_generator_note_on =
      _wire_generator_note_onPtr.asFunction<void Function(int, double)>();

  void wire_generator_note_off(
    int port_,
  ) {
    return _wire_generator_note_off(
      port_,
    );
  }

  late final _wire_generator_note_offPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generator_note_off');
  late final _wire_generator_note_off =
      _wire_generator_note_offPtr.asFunction<void Function(int)>();

  void wire_media_player_load_wav(
    int port_,
    ffi.Pointer<wire_uint_8_list> wav_file_path,
  ) {
    return _wire_media_player_load_wav(
      port_,
      wav_file_path,
    );
  }

  late final _wire_media_player_load_wavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_media_player_load_wav');
  late final _wire_media_player_load_wav = _wire_media_player_load_wavPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_media_player_start(
    int port_,
  ) {
    return _wire_media_player_start(
      port_,
    );
  }

  late final _wire_media_player_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_start');
  late final _wire_media_player_start =
      _wire_media_player_startPtr.asFunction<void Function(int)>();

  void wire_media_player_stop(
    int port_,
  ) {
    return _wire_media_player_stop(
      port_,
    );
  }

  late final _wire_media_player_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_stop');
  late final _wire_media_player_stop =
      _wire_media_player_stopPtr.asFunction<void Function(int)>();

  void wire_media_player_start_recording(
    int port_,
  ) {
    return _wire_media_player_start_recording(
      port_,
    );
  }

  late final _wire_media_player_start_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_start_recording');
  late final _wire_media_player_start_recording =
      _wire_media_player_start_recordingPtr.asFunction<void Function(int)>();

  void wire_media_player_stop_recording(
    int port_,
  ) {
    return _wire_media_player_stop_recording(
      port_,
    );
  }

  late final _wire_media_player_stop_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_stop_recording');
  late final _wire_media_player_stop_recording =
      _wire_media_player_stop_recordingPtr.asFunction<void Function(int)>();

  void wire_media_player_get_recording_samples(
    int port_,
  ) {
    return _wire_media_player_get_recording_samples(
      port_,
    );
  }

  late final _wire_media_player_get_recording_samplesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_get_recording_samples');
  late final _wire_media_player_get_recording_samples =
      _wire_media_player_get_recording_samplesPtr
          .asFunction<void Function(int)>();

  void wire_media_player_set_pitch_semitones(
    int port_,
    double pitch_semitones,
  ) {
    return _wire_media_player_set_pitch_semitones(
      port_,
      pitch_semitones,
    );
  }

  late final _wire_media_player_set_pitch_semitonesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_media_player_set_pitch_semitones');
  late final _wire_media_player_set_pitch_semitones =
      _wire_media_player_set_pitch_semitonesPtr
          .asFunction<void Function(int, double)>();

  void wire_media_player_set_speed_factor(
    int port_,
    double speed_factor,
  ) {
    return _wire_media_player_set_speed_factor(
      port_,
      speed_factor,
    );
  }

  late final _wire_media_player_set_speed_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_media_player_set_speed_factor');
  late final _wire_media_player_set_speed_factor =
      _wire_media_player_set_speed_factorPtr
          .asFunction<void Function(int, double)>();

  void wire_media_player_set_trim(
    int port_,
    double start_factor,
    double end_factor,
  ) {
    return _wire_media_player_set_trim(
      port_,
      start_factor,
      end_factor,
    );
  }

  late final _wire_media_player_set_trimPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float, ffi.Float)>>(
      'wire_media_player_set_trim');
  late final _wire_media_player_set_trim = _wire_media_player_set_trimPtr
      .asFunction<void Function(int, double, double)>();

  void wire_media_player_get_rms(
    int port_,
    int n_bins,
  ) {
    return _wire_media_player_get_rms(
      port_,
      n_bins,
    );
  }

  late final _wire_media_player_get_rmsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'wire_media_player_get_rms');
  late final _wire_media_player_get_rms =
      _wire_media_player_get_rmsPtr.asFunction<void Function(int, int)>();

  void wire_media_player_set_loop(
    int port_,
    bool looping,
  ) {
    return _wire_media_player_set_loop(
      port_,
      looping,
    );
  }

  late final _wire_media_player_set_loopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_media_player_set_loop');
  late final _wire_media_player_set_loop =
      _wire_media_player_set_loopPtr.asFunction<void Function(int, bool)>();

  void wire_media_player_get_state(
    int port_,
  ) {
    return _wire_media_player_get_state(
      port_,
    );
  }

  late final _wire_media_player_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_media_player_get_state');
  late final _wire_media_player_get_state =
      _wire_media_player_get_statePtr.asFunction<void Function(int)>();

  void wire_media_player_set_playback_pos_factor(
    int port_,
    double pos_factor,
  ) {
    return _wire_media_player_set_playback_pos_factor(
      port_,
      pos_factor,
    );
  }

  late final _wire_media_player_set_playback_pos_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_media_player_set_playback_pos_factor');
  late final _wire_media_player_set_playback_pos_factor =
      _wire_media_player_set_playback_pos_factorPtr
          .asFunction<void Function(int, double)>();

  void wire_media_player_set_volume(
    int port_,
    double volume,
  ) {
    return _wire_media_player_set_volume(
      port_,
      volume,
    );
  }

  late final _wire_media_player_set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_media_player_set_volume');
  late final _wire_media_player_set_volume =
      _wire_media_player_set_volumePtr.asFunction<void Function(int, double)>();

  void wire_metronome_start(
    int port_,
  ) {
    return _wire_metronome_start(
      port_,
    );
  }

  late final _wire_metronome_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_metronome_start');
  late final _wire_metronome_start =
      _wire_metronome_startPtr.asFunction<void Function(int)>();

  void wire_metronome_stop(
    int port_,
  ) {
    return _wire_metronome_stop(
      port_,
    );
  }

  late final _wire_metronome_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_metronome_stop');
  late final _wire_metronome_stop =
      _wire_metronome_stopPtr.asFunction<void Function(int)>();

  void wire_metronome_set_bpm(
    int port_,
    double bpm,
  ) {
    return _wire_metronome_set_bpm(
      port_,
      bpm,
    );
  }

  late final _wire_metronome_set_bpmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_metronome_set_bpm');
  late final _wire_metronome_set_bpm =
      _wire_metronome_set_bpmPtr.asFunction<void Function(int, double)>();

  void wire_metronome_load_file(
    int port_,
    int beat_type,
    ffi.Pointer<wire_uint_8_list> wav_file_path,
  ) {
    return _wire_metronome_load_file(
      port_,
      beat_type,
      wav_file_path,
    );
  }

  late final _wire_metronome_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_metronome_load_file');
  late final _wire_metronome_load_file = _wire_metronome_load_filePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_metronome_set_rhythm(
    int port_,
    ffi.Pointer<wire_list_metro_bar> bars,
    ffi.Pointer<wire_list_metro_bar> bars_2,
  ) {
    return _wire_metronome_set_rhythm(
      port_,
      bars,
      bars_2,
    );
  }

  late final _wire_metronome_set_rhythmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_metro_bar>,
              ffi.Pointer<wire_list_metro_bar>)>>('wire_metronome_set_rhythm');
  late final _wire_metronome_set_rhythm =
      _wire_metronome_set_rhythmPtr.asFunction<
          void Function(int, ffi.Pointer<wire_list_metro_bar>,
              ffi.Pointer<wire_list_metro_bar>)>();

  void wire_metronome_poll_beat_event_happened(
    int port_,
  ) {
    return _wire_metronome_poll_beat_event_happened(
      port_,
    );
  }

  late final _wire_metronome_poll_beat_event_happenedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_metronome_poll_beat_event_happened');
  late final _wire_metronome_poll_beat_event_happened =
      _wire_metronome_poll_beat_event_happenedPtr
          .asFunction<void Function(int)>();

  void wire_metronome_set_muted(
    int port_,
    bool muted,
  ) {
    return _wire_metronome_set_muted(
      port_,
      muted,
    );
  }

  late final _wire_metronome_set_mutedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_metronome_set_muted');
  late final _wire_metronome_set_muted =
      _wire_metronome_set_mutedPtr.asFunction<void Function(int, bool)>();

  void wire_metronome_set_beat_mute_chance(
    int port_,
    double mute_chance,
  ) {
    return _wire_metronome_set_beat_mute_chance(
      port_,
      mute_chance,
    );
  }

  late final _wire_metronome_set_beat_mute_chancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_metronome_set_beat_mute_chance');
  late final _wire_metronome_set_beat_mute_chance =
      _wire_metronome_set_beat_mute_chancePtr
          .asFunction<void Function(int, double)>();

  void wire_metronome_set_volume(
    int port_,
    double volume,
  ) {
    return _wire_metronome_set_volume(
      port_,
      volume,
    );
  }

  late final _wire_metronome_set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_metronome_set_volume');
  late final _wire_metronome_set_volume =
      _wire_metronome_set_volumePtr.asFunction<void Function(int, double)>();

  void wire_piano_setup(
    int port_,
    ffi.Pointer<wire_uint_8_list> sound_font_path,
  ) {
    return _wire_piano_setup(
      port_,
      sound_font_path,
    );
  }

  late final _wire_piano_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_piano_setup');
  late final _wire_piano_setup = _wire_piano_setupPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_piano_start(
    int port_,
  ) {
    return _wire_piano_start(
      port_,
    );
  }

  late final _wire_piano_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_piano_start');
  late final _wire_piano_start =
      _wire_piano_startPtr.asFunction<void Function(int)>();

  void wire_piano_stop(
    int port_,
  ) {
    return _wire_piano_stop(
      port_,
    );
  }

  late final _wire_piano_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_piano_stop');
  late final _wire_piano_stop =
      _wire_piano_stopPtr.asFunction<void Function(int)>();

  void wire_piano_note_on(
    int port_,
    int note,
  ) {
    return _wire_piano_note_on(
      port_,
      note,
    );
  }

  late final _wire_piano_note_onPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_piano_note_on');
  late final _wire_piano_note_on =
      _wire_piano_note_onPtr.asFunction<void Function(int, int)>();

  void wire_piano_note_off(
    int port_,
    int note,
  ) {
    return _wire_piano_note_off(
      port_,
      note,
    );
  }

  late final _wire_piano_note_offPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_piano_note_off');
  late final _wire_piano_note_off =
      _wire_piano_note_offPtr.asFunction<void Function(int, int)>();

  void wire_piano_set_volume(
    int port_,
    double volume,
  ) {
    return _wire_piano_set_volume(
      port_,
      volume,
    );
  }

  late final _wire_piano_set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_piano_set_volume');
  late final _wire_piano_set_volume =
      _wire_piano_set_volumePtr.asFunction<void Function(int, double)>();

  void wire_get_sample_rate(
    int port_,
  ) {
    return _wire_get_sample_rate(
      port_,
    );
  }

  late final _wire_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_sample_rate');
  late final _wire_get_sample_rate =
      _wire_get_sample_ratePtr.asFunction<void Function(int)>();

  void wire_debug_test_function(
    int port_,
  ) {
    return _wire_debug_test_function(
      port_,
    );
  }

  late final _wire_debug_test_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_debug_test_function');
  late final _wire_debug_test_function =
      _wire_debug_test_functionPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_list_beat_type> new_list_beat_type_0(
    int len,
  ) {
    return _new_list_beat_type_0(
      len,
    );
  }

  late final _new_list_beat_type_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_beat_type> Function(
              ffi.Int32)>>('new_list_beat_type_0');
  late final _new_list_beat_type_0 = _new_list_beat_type_0Ptr
      .asFunction<ffi.Pointer<wire_list_beat_type> Function(int)>();

  ffi.Pointer<wire_list_beat_type_poly> new_list_beat_type_poly_0(
    int len,
  ) {
    return _new_list_beat_type_poly_0(
      len,
    );
  }

  late final _new_list_beat_type_poly_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_beat_type_poly> Function(
              ffi.Int32)>>('new_list_beat_type_poly_0');
  late final _new_list_beat_type_poly_0 = _new_list_beat_type_poly_0Ptr
      .asFunction<ffi.Pointer<wire_list_beat_type_poly> Function(int)>();

  ffi.Pointer<wire_list_metro_bar> new_list_metro_bar_0(
    int len,
  ) {
    return _new_list_metro_bar_0(
      len,
    );
  }

  late final _new_list_metro_bar_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_metro_bar> Function(
              ffi.Int32)>>('new_list_metro_bar_0');
  late final _new_list_metro_bar_0 = _new_list_metro_bar_0Ptr
      .asFunction<ffi.Pointer<wire_list_metro_bar> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_beat_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_beat_type_poly extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MetroBar extends ffi.Struct {
  @ffi.Int32()
  external int id;

  external ffi.Pointer<wire_list_beat_type> beats;

  external ffi.Pointer<wire_list_beat_type_poly> poly_beats;

  @ffi.Float()
  external double beat_len;
}

final class wire_list_metro_bar extends ffi.Struct {
  external ffi.Pointer<wire_MetroBar> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int NUM_CHANNELS = 1;

const int AUDIO_STREAM_CREATE_TIMEOUT_SECONDS = 10;

const int PITCH_SHIFT_BUFFER_SIZE = 64;

const int MEDIA_PLAYER_PLAYBACK_MAX_BUFFERING = 4160;

const int MEDIA_PLAYER_PLAYBACK_MIN_BUFFERING = 1024;

const int PITCH_SHIFT_OVERSAMPLING = 4;

const int PITCH_SHIFT_WINDOW_DUR_MILLIS = 70;

const int TUNER_RING_BUFFER_SIZE = 2048;

const double POWER_THRESHOLD = 0.055;

const double CLARITY_THRESHOLD = 0.7;
