// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/api.dart';
import 'api/modules/media_player.dart';
import 'api/modules/metronome.dart';
import 'api/modules/metronome_rhythm.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  BeatHappenedEvent dco_decode_beat_happened_event(dynamic raw);

  @protected
  BeatSound dco_decode_beat_sound(dynamic raw);

  @protected
  BeatType dco_decode_beat_type(dynamic raw);

  @protected
  BeatTypePoly dco_decode_beat_type_poly(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  BeatHappenedEvent dco_decode_box_autoadd_beat_happened_event(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  MediaPlayerState dco_decode_box_autoadd_media_player_state(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<BeatType> dco_decode_list_beat_type(dynamic raw);

  @protected
  List<BeatTypePoly> dco_decode_list_beat_type_poly(dynamic raw);

  @protected
  List<MetroBar> dco_decode_list_metro_bar(dynamic raw);

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw);

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  MediaPlayerState dco_decode_media_player_state(dynamic raw);

  @protected
  MetroBar dco_decode_metro_bar(dynamic raw);

  @protected
  BeatHappenedEvent? dco_decode_opt_box_autoadd_beat_happened_event(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  MediaPlayerState? dco_decode_opt_box_autoadd_media_player_state(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  BeatHappenedEvent sse_decode_beat_happened_event(SseDeserializer deserializer);

  @protected
  BeatSound sse_decode_beat_sound(SseDeserializer deserializer);

  @protected
  BeatType sse_decode_beat_type(SseDeserializer deserializer);

  @protected
  BeatTypePoly sse_decode_beat_type_poly(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  BeatHappenedEvent sse_decode_box_autoadd_beat_happened_event(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  MediaPlayerState sse_decode_box_autoadd_media_player_state(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<BeatType> sse_decode_list_beat_type(SseDeserializer deserializer);

  @protected
  List<BeatTypePoly> sse_decode_list_beat_type_poly(SseDeserializer deserializer);

  @protected
  List<MetroBar> sse_decode_list_metro_bar(SseDeserializer deserializer);

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer);

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  MediaPlayerState sse_decode_media_player_state(SseDeserializer deserializer);

  @protected
  MetroBar sse_decode_metro_bar(SseDeserializer deserializer);

  @protected
  BeatHappenedEvent? sse_decode_opt_box_autoadd_beat_happened_event(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  MediaPlayerState? sse_decode_opt_box_autoadd_media_player_state(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_beat_happened_event(BeatHappenedEvent self, SseSerializer serializer);

  @protected
  void sse_encode_beat_sound(BeatSound self, SseSerializer serializer);

  @protected
  void sse_encode_beat_type(BeatType self, SseSerializer serializer);

  @protected
  void sse_encode_beat_type_poly(BeatTypePoly self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_beat_happened_event(BeatHappenedEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_media_player_state(MediaPlayerState self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_beat_type(List<BeatType> self, SseSerializer serializer);

  @protected
  void sse_encode_list_beat_type_poly(List<BeatTypePoly> self, SseSerializer serializer);

  @protected
  void sse_encode_list_metro_bar(List<MetroBar> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_32_strict(Float32List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64_strict(Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_media_player_state(MediaPlayerState self, SseSerializer serializer);

  @protected
  void sse_encode_metro_bar(MetroBar self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_beat_happened_event(BeatHappenedEvent? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_media_player_state(MediaPlayerState? self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {}
