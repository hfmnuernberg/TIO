// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `apply_headroom_if_many`, `ensure_output_stream`, `get_or_create`, `new`, `new`, `rebuild_output_stream`, `set_pos_factor`, `with_mixer_mut`, `with_mixer`, `with_player_mut`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `MIXER`, `Mixer`, `PlayerCore`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `deref`, `fmt`, `initialize`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `mp_compute_rms`, `mp_get_state`, `mp_load`, `mp_set_loop_mode`, `mp_set_pitch`, `mp_set_pos_factor`, `mp_set_speed`, `mp_set_trim_by_factor`, `mp_set_volume`, `mp_start`, `mp_stop`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `compute_rms`, `get_state`, `set_loop_value`, `set_pitch`, `set_speed`, `set_trim_by_factor`, `set_volume`, `start`, `stop`

class MediaPlayerState {
  final bool playing;
  final double playbackPositionFactor;
  final double totalLengthSeconds;

  const MediaPlayerState({
    required this.playing,
    required this.playbackPositionFactor,
    required this.totalLengthSeconds,
  });

  @override
  int get hashCode => playing.hashCode ^ playbackPositionFactor.hashCode ^ totalLengthSeconds.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MediaPlayerState &&
          runtimeType == other.runtimeType &&
          playing == other.playing &&
          playbackPositionFactor == other.playbackPositionFactor &&
          totalLengthSeconds == other.totalLengthSeconds;
}
